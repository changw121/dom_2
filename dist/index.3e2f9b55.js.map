{"mappings":"AAAA,sCAAsC;AACtC,4DAA4D;AAC5D,0BAA0B;AAC1B,uBAAuB;AACvB,2BAA2B;AAC3B,kCAAkC;AAClC,2CAA2C;AAC3C,uDAAuD;AACvD,0DAA0D;AAC1D,mBAAmB;AACnB,wCAAwC;AACxC,mDAAmD;AACnD,eAAe;AACf,WAAW;AACX,oBAAoB;AAEpB,kDAAkD;AAClD,eAAe;AACf,wBAAwB;AACxB,+BAA+B;AAC/B,wCAAwC;AACxC,oDAAoD;AACpD,uDAAuD;AACvD,gBAAgB;AAChB,6EAA6E;AAC7E,uEAAuE;AACvE,aAAa;AACb,0BAA0B;AAC1B,gFAAgF;AAChF,6BAA6B;AAC7B,oDAAoD;AACpD,wDAAwD;AACxD,uFAAuF;AACvF,mDAAmD;AACnD,gBAAgB;AAChB,2BAA2B;AAC3B,YAAY;AACZ,QAAQ;AACR,IAAI;AAGJ,gCAAgC;AAChC,MAAM,CAAC,MAAM,GAAG,SAAS,eAAe,EAAC;IACrC,IAAI,QAAQ;IACZ,IAAG,OAAO,eAAe,KAAK,QAAQ,EAClC,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;SACnD,IAAG,eAAe,YAAY,KAAK,EACtC,QAAQ,GAAG,eAAe,CAAC;IAE/B,2CAA2C;IAC3C,OAAO;QACH,MAAM,EAAE,eAAe,CAAC,MAAM;QAC9B,aAAa;QACb,QAAQ,EAAC,SAAS,EAAC;YACf,yBAAyB;YACzB,IAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAC/B,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YAExC,8DAA8D;YAClE,OAAO,IAAI,CAAC,gDAAgD;aAAjD;SACV;QACD,IAAI,EAAC,QAAQ,EAAC;YACV,iEAAiE;YACjE,IAAI,KAAK,GAAG,EAAE;YACd,IAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;gBAChC,qCAAqC;gBACrC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBACpE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;aAClC;YACD,+BAA+B;YAC/B,gBAAgB;YAChB,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa;YAAd;YACnB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;SACvB;QACD,GAAG,IAAE;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa;aAAd;SACrB;KACJ,CAAA;CACJ","sources":["src/jquery.js"],"sourcesContent":["// window.jQuery = function(selector){\r\n//     const elements = document.querySelectorAll(selector);\r\n//     //api 可以操作 elements\r\n//     // const api = {\r\n//     //     //闭包：函数访问外部变量\r\n//     //     addClass(className){\r\n//     //         //遍历所有刚才获取的元素，添加className\r\n//     //         for(let i=0; i<elements.length; i++){\r\n//     //             elements[i].classList.add(className)\r\n//     //         }\r\n//     //         // return api   //链式操作\r\n//     //         return this // addClass的this就是api\r\n//     //     }\r\n//     // }\r\n//     // return api\r\n\r\n//     //上面声明了一个对象叫api下面return api，是不是可以直接return对象\r\n//     return {\r\n//         //闭包：函数访问外部变量\r\n//         addClass(className){\r\n//             //遍历所有刚才获取的元素，添加className\r\n//             for(let i=0; i<elements.length; i++){\r\n//                 elements[i].classList.add(className)\r\n//             }\r\n//             // return api   //方面进行链式操作，如果没有定义api，就不能return api喽，只能用下面的this\r\n//         return this // addClass的this就是api，所以return api等价于return this\r\n//         },\r\n//         find(selector){\r\n//             //jQuery('.test1').find('.child') 需要在test1里面找child，怎样获取test1这个范围呢\r\n//             let array = []\r\n//             for(let i=0; i<elements.length; i++){\r\n//                 //遍历每一个test1，看里面是否有child,有将其放入array返回\r\n//                 const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n//                 array = array.concat(elements2) \r\n//             }\r\n//             return array\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n//上面的代码中，find不能实现链式调用，所以我们下面重新封装\r\nwindow.jQuery = function(selectorOrArray){\r\n    let elements\r\n    if(typeof selectorOrArray === 'string'){\r\n        elements = document.querySelectorAll(selectorOrArray);\r\n    } else if(selectorOrArray instanceof Array){\r\n        elements = selectorOrArray;\r\n    }\r\n    //上面声明了一个对象叫api下面return api，是不是可以直接return对象\r\n    return {\r\n        oldApi: selectorOrArray.oldApi,\r\n        //闭包：函数访问外部变量\r\n        addClass(className){\r\n            //遍历所有刚才获取的元素，添加className\r\n            for(let i=0; i<elements.length; i++){\r\n                elements[i].classList.add(className)\r\n            }\r\n            // return api   //方面进行链式操作，如果没有定义api，就不能return api喽，只能用下面的this\r\n        return this // addClass的this就是api，所以return api等价于return this\r\n        },\r\n        find(selector){\r\n            //jQuery('.test1').find('.child') 需要在test1里面找child，怎样获取test1这个范围呢\r\n            let array = []\r\n            for(let i=0; i<elements.length; i++){\r\n                //遍历每一个test1，看里面是否有child,有将其放入array返回\r\n                const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n                array = array.concat(elements2) \r\n            }\r\n            // const newApi = jQuery(array)\r\n            // return newApi\r\n            array.oldApi = this // this是 旧api\r\n            return jQuery(array)\r\n        },\r\n        end(){\r\n            return this.oldApi //this 是 新api\r\n        }\r\n    }\r\n}"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}